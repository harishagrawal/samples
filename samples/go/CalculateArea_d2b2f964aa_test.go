// Test generated by RoostGPT for test roost-go using AI Type Open AI and AI Model gpt-4

package main

import (
	"testing"
)

type Rectangle struct {
	width, height, area float64
}

func (rect *Rectangle) CalculateArea() {
	rect.area = rect.width * rect.height //area of rectangle
}

func TestCalculateArea_d2b2f964aa(t *testing.T) {
	// Test case 1: Normal scenario
	rect1 := &Rectangle{width: 10, height: 20}
	rect1.CalculateArea()
	if rect1.area != 200 {
		t.Errorf("Calculation failed, expected: %v, got: %v", 200, rect1.area)
	}

	// Test case 2: Zero width and height
	rect2 := &Rectangle{width: 0, height: 0}
	rect2.CalculateArea()
	if rect2.area != 0 {
		t.Errorf("Calculation failed, expected: %v, got: %v", 0, rect2.area)
	}

	// Test case 3: Negative width and height
	rect3 := &Rectangle{width: -5, height: -10}
	rect3.CalculateArea()
	if rect3.area != 50 { // -5 * -10 = 50
		t.Errorf("Calculation failed, expected: %v, got: %v", 50, rect3.area)
	}

	// Test case 4: Only width is negative
	rect4 := &Rectangle{width: -5, height: 10}
	rect4.CalculateArea()
	if rect4.area != -50 { // -5 * 10 = -50
		t.Errorf("Calculation failed, expected: %v, got: %v", -50, rect4.area)
	}

	// Test case 5: Only height is negative
	rect5 := &Rectangle{width: 5, height: -10}
	rect5.CalculateArea()
	if rect5.area != -50 { // 5 * -10 = -50
		t.Errorf("Calculation failed, expected: %v, got: %v", -50, rect5.area)
	}
}
